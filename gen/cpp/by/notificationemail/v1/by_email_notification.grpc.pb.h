// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: by/notificationemail/v1/by_email_notification.proto
// Original file comments:
// Copyright 2019 Cuemby, LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
#ifndef GRPC_by_2fnotificationemail_2fv1_2fby_5femail_5fnotification_2eproto__INCLUDED
#define GRPC_by_2fnotificationemail_2fv1_2fby_5femail_5fnotification_2eproto__INCLUDED

#include "by/notificationemail/v1/by_email_notification.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace by {
namespace notificationemail {
namespace v1 {

// NotificationEmailAPI ...
class NotificationEmailAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "by.notificationemail.v1.NotificationEmailAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // SendEmail ...
    virtual ::grpc::Status SendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::by::notificationemail::v1::SendEmailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailResponse>> AsyncSendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailResponse>>(AsyncSendEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailResponse>> PrepareAsyncSendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailResponse>>(PrepareAsyncSendEmailRaw(context, request, cq));
    }
    virtual ::grpc::Status SendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>> AsyncSendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>>(AsyncSendEmailWithCustomDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>> PrepareAsyncSendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>>(PrepareAsyncSendEmailWithCustomDomainRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // SendEmail ...
      virtual void SendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest* request, ::by::notificationemail::v1::SendEmailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailResponse>* AsyncSendEmailRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailResponse>* PrepareAsyncSendEmailRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>* AsyncSendEmailWithCustomDomainRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>* PrepareAsyncSendEmailWithCustomDomainRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::by::notificationemail::v1::SendEmailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailResponse>> AsyncSendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailResponse>>(AsyncSendEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailResponse>> PrepareAsyncSendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailResponse>>(PrepareAsyncSendEmailRaw(context, request, cq));
    }
    ::grpc::Status SendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>> AsyncSendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>>(AsyncSendEmailWithCustomDomainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>> PrepareAsyncSendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>>(PrepareAsyncSendEmailWithCustomDomainRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendEmail(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest* request, ::by::notificationemail::v1::SendEmailResponse* response, std::function<void(::grpc::Status)>) override;
      void SendEmailWithCustomDomain(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailResponse>* AsyncSendEmailRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailResponse>* PrepareAsyncSendEmailRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>* AsyncSendEmailWithCustomDomainRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>* PrepareAsyncSendEmailWithCustomDomainRaw(::grpc::ClientContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendEmail_;
    const ::grpc::internal::RpcMethod rpcmethod_SendEmailWithCustomDomain_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // SendEmail ...
    virtual ::grpc::Status SendEmail(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailRequest* request, ::by::notificationemail::v1::SendEmailResponse* response);
    virtual ::grpc::Status SendEmailWithCustomDomain(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendEmail() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEmail(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailRequest* request, ::by::notificationemail::v1::SendEmailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEmail(::grpc::ServerContext* context, ::by::notificationemail::v1::SendEmailRequest* request, ::grpc::ServerAsyncResponseWriter< ::by::notificationemail::v1::SendEmailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendEmailWithCustomDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendEmailWithCustomDomain() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendEmailWithCustomDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEmailWithCustomDomain(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEmailWithCustomDomain(::grpc::ServerContext* context, ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::grpc::ServerAsyncResponseWriter< ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendEmail<WithAsyncMethod_SendEmailWithCustomDomain<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendEmail() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEmail(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailRequest* request, ::by::notificationemail::v1::SendEmailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendEmailWithCustomDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendEmailWithCustomDomain() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendEmailWithCustomDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEmailWithCustomDomain(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendEmail() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEmail(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailRequest* request, ::by::notificationemail::v1::SendEmailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEmail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendEmailWithCustomDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendEmailWithCustomDomain() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendEmailWithCustomDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendEmailWithCustomDomain(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendEmailWithCustomDomain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendEmail() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::by::notificationemail::v1::SendEmailRequest, ::by::notificationemail::v1::SendEmailResponse>(std::bind(&WithStreamedUnaryMethod_SendEmail<BaseClass>::StreamedSendEmail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendEmail(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailRequest* request, ::by::notificationemail::v1::SendEmailResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendEmail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::by::notificationemail::v1::SendEmailRequest,::by::notificationemail::v1::SendEmailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendEmailWithCustomDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendEmailWithCustomDomain() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::by::notificationemail::v1::SendEmailWithCustomDomainRequest, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse>(std::bind(&WithStreamedUnaryMethod_SendEmailWithCustomDomain<BaseClass>::StreamedSendEmailWithCustomDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendEmailWithCustomDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendEmailWithCustomDomain(::grpc::ServerContext* context, const ::by::notificationemail::v1::SendEmailWithCustomDomainRequest* request, ::by::notificationemail::v1::SendEmailWithCustomDomainResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendEmailWithCustomDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::by::notificationemail::v1::SendEmailWithCustomDomainRequest,::by::notificationemail::v1::SendEmailWithCustomDomainResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendEmail<WithStreamedUnaryMethod_SendEmailWithCustomDomain<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendEmail<WithStreamedUnaryMethod_SendEmailWithCustomDomain<Service > > StreamedService;
};

}  // namespace v1
}  // namespace notificationemail
}  // namespace by


#endif  // GRPC_by_2fnotificationemail_2fv1_2fby_5femail_5fnotification_2eproto__INCLUDED
